// @generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tunnelbroker.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tunnelbroker_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tunnelbroker_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tunnelbroker_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tunnelbroker_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tunnelbroker_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_tunnelbroker_2eproto_metadata_getter(int index);
namespace tunnelbroker {
class CheckRequest;
struct CheckRequestDefaultTypeInternal;
extern CheckRequestDefaultTypeInternal _CheckRequest_default_instance_;
class CheckResponse;
struct CheckResponseDefaultTypeInternal;
extern CheckResponseDefaultTypeInternal _CheckResponse_default_instance_;
class NewPrimaryRequest;
struct NewPrimaryRequestDefaultTypeInternal;
extern NewPrimaryRequestDefaultTypeInternal _NewPrimaryRequest_default_instance_;
class NewPrimaryResponse;
struct NewPrimaryResponseDefaultTypeInternal;
extern NewPrimaryResponseDefaultTypeInternal _NewPrimaryResponse_default_instance_;
class PongRequest;
struct PongRequestDefaultTypeInternal;
extern PongRequestDefaultTypeInternal _PongRequest_default_instance_;
class PongResponse;
struct PongResponseDefaultTypeInternal;
extern PongResponseDefaultTypeInternal _PongResponse_default_instance_;
}  // namespace tunnelbroker
PROTOBUF_NAMESPACE_OPEN
template<> ::tunnelbroker::CheckRequest* Arena::CreateMaybeMessage<::tunnelbroker::CheckRequest>(Arena*);
template<> ::tunnelbroker::CheckResponse* Arena::CreateMaybeMessage<::tunnelbroker::CheckResponse>(Arena*);
template<> ::tunnelbroker::NewPrimaryRequest* Arena::CreateMaybeMessage<::tunnelbroker::NewPrimaryRequest>(Arena*);
template<> ::tunnelbroker::NewPrimaryResponse* Arena::CreateMaybeMessage<::tunnelbroker::NewPrimaryResponse>(Arena*);
template<> ::tunnelbroker::PongRequest* Arena::CreateMaybeMessage<::tunnelbroker::PongRequest>(Arena*);
template<> ::tunnelbroker::PongResponse* Arena::CreateMaybeMessage<::tunnelbroker::PongResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tunnelbroker {

enum CheckResponseType : int {
  PRIMARY_DOESNT_EXIST = 0,
  PRIMARY_ONLINE = 1,
  PRIMARY_OFFLINE = 2,
  CURRENT_IS_PRIMARY = 3,
  CheckResponseType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CheckResponseType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CheckResponseType_IsValid(int value);
constexpr CheckResponseType CheckResponseType_MIN = PRIMARY_DOESNT_EXIST;
constexpr CheckResponseType CheckResponseType_MAX = CURRENT_IS_PRIMARY;
constexpr int CheckResponseType_ARRAYSIZE = CheckResponseType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CheckResponseType_descriptor();
template<typename T>
inline const std::string& CheckResponseType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CheckResponseType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CheckResponseType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CheckResponseType_descriptor(), enum_t_value);
}
inline bool CheckResponseType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CheckResponseType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CheckResponseType>(
    CheckResponseType_descriptor(), name, value);
}
// ===================================================================

class CheckRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tunnelbroker.CheckRequest) */ {
 public:
  inline CheckRequest() : CheckRequest(nullptr) {}
  virtual ~CheckRequest();
  explicit constexpr CheckRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CheckRequest(const CheckRequest& from);
  CheckRequest(CheckRequest&& from) noexcept
    : CheckRequest() {
    *this = ::std::move(from);
  }

  inline CheckRequest& operator=(const CheckRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckRequest& operator=(CheckRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CheckRequest* internal_default_instance() {
    return reinterpret_cast<const CheckRequest*>(
               &_CheckRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CheckRequest& a, CheckRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckRequest* New() const final {
    return CreateMaybeMessage<CheckRequest>(nullptr);
  }

  CheckRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckRequest& from);
  void MergeFrom(const CheckRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tunnelbroker.CheckRequest";
  }
  protected:
  explicit CheckRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_tunnelbroker_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kDeviceTokenFieldNumber = 2,
  };
  // string userId = 1;
  void clear_userid();
  const std::string& userid() const;
  void set_userid(const std::string& value);
  void set_userid(std::string&& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  std::string* mutable_userid();
  std::string* release_userid();
  void set_allocated_userid(std::string* userid);
  private:
  const std::string& _internal_userid() const;
  void _internal_set_userid(const std::string& value);
  std::string* _internal_mutable_userid();
  public:

  // string deviceToken = 2;
  void clear_devicetoken();
  const std::string& devicetoken() const;
  void set_devicetoken(const std::string& value);
  void set_devicetoken(std::string&& value);
  void set_devicetoken(const char* value);
  void set_devicetoken(const char* value, size_t size);
  std::string* mutable_devicetoken();
  std::string* release_devicetoken();
  void set_allocated_devicetoken(std::string* devicetoken);
  private:
  const std::string& _internal_devicetoken() const;
  void _internal_set_devicetoken(const std::string& value);
  std::string* _internal_mutable_devicetoken();
  public:

  // @@protoc_insertion_point(class_scope:tunnelbroker.CheckRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr devicetoken_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tunnelbroker_2eproto;
};
// -------------------------------------------------------------------

class CheckResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tunnelbroker.CheckResponse) */ {
 public:
  inline CheckResponse() : CheckResponse(nullptr) {}
  virtual ~CheckResponse();
  explicit constexpr CheckResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CheckResponse(const CheckResponse& from);
  CheckResponse(CheckResponse&& from) noexcept
    : CheckResponse() {
    *this = ::std::move(from);
  }

  inline CheckResponse& operator=(const CheckResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckResponse& operator=(CheckResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CheckResponse* internal_default_instance() {
    return reinterpret_cast<const CheckResponse*>(
               &_CheckResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CheckResponse& a, CheckResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckResponse* New() const final {
    return CreateMaybeMessage<CheckResponse>(nullptr);
  }

  CheckResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckResponse& from);
  void MergeFrom(const CheckResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tunnelbroker.CheckResponse";
  }
  protected:
  explicit CheckResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_tunnelbroker_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCheckResponseTypeFieldNumber = 1,
  };
  // .tunnelbroker.CheckResponseType checkResponseType = 1;
  void clear_checkresponsetype();
  ::tunnelbroker::CheckResponseType checkresponsetype() const;
  void set_checkresponsetype(::tunnelbroker::CheckResponseType value);
  private:
  ::tunnelbroker::CheckResponseType _internal_checkresponsetype() const;
  void _internal_set_checkresponsetype(::tunnelbroker::CheckResponseType value);
  public:

  // @@protoc_insertion_point(class_scope:tunnelbroker.CheckResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int checkresponsetype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tunnelbroker_2eproto;
};
// -------------------------------------------------------------------

class NewPrimaryRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tunnelbroker.NewPrimaryRequest) */ {
 public:
  inline NewPrimaryRequest() : NewPrimaryRequest(nullptr) {}
  virtual ~NewPrimaryRequest();
  explicit constexpr NewPrimaryRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NewPrimaryRequest(const NewPrimaryRequest& from);
  NewPrimaryRequest(NewPrimaryRequest&& from) noexcept
    : NewPrimaryRequest() {
    *this = ::std::move(from);
  }

  inline NewPrimaryRequest& operator=(const NewPrimaryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewPrimaryRequest& operator=(NewPrimaryRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NewPrimaryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const NewPrimaryRequest* internal_default_instance() {
    return reinterpret_cast<const NewPrimaryRequest*>(
               &_NewPrimaryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NewPrimaryRequest& a, NewPrimaryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NewPrimaryRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewPrimaryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NewPrimaryRequest* New() const final {
    return CreateMaybeMessage<NewPrimaryRequest>(nullptr);
  }

  NewPrimaryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NewPrimaryRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NewPrimaryRequest& from);
  void MergeFrom(const NewPrimaryRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewPrimaryRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tunnelbroker.NewPrimaryRequest";
  }
  protected:
  explicit NewPrimaryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_tunnelbroker_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kDeviceTokenFieldNumber = 2,
  };
  // string userId = 1;
  void clear_userid();
  const std::string& userid() const;
  void set_userid(const std::string& value);
  void set_userid(std::string&& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  std::string* mutable_userid();
  std::string* release_userid();
  void set_allocated_userid(std::string* userid);
  private:
  const std::string& _internal_userid() const;
  void _internal_set_userid(const std::string& value);
  std::string* _internal_mutable_userid();
  public:

  // string deviceToken = 2;
  void clear_devicetoken();
  const std::string& devicetoken() const;
  void set_devicetoken(const std::string& value);
  void set_devicetoken(std::string&& value);
  void set_devicetoken(const char* value);
  void set_devicetoken(const char* value, size_t size);
  std::string* mutable_devicetoken();
  std::string* release_devicetoken();
  void set_allocated_devicetoken(std::string* devicetoken);
  private:
  const std::string& _internal_devicetoken() const;
  void _internal_set_devicetoken(const std::string& value);
  std::string* _internal_mutable_devicetoken();
  public:

  // @@protoc_insertion_point(class_scope:tunnelbroker.NewPrimaryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr devicetoken_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tunnelbroker_2eproto;
};
// -------------------------------------------------------------------

class NewPrimaryResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tunnelbroker.NewPrimaryResponse) */ {
 public:
  inline NewPrimaryResponse() : NewPrimaryResponse(nullptr) {}
  virtual ~NewPrimaryResponse();
  explicit constexpr NewPrimaryResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NewPrimaryResponse(const NewPrimaryResponse& from);
  NewPrimaryResponse(NewPrimaryResponse&& from) noexcept
    : NewPrimaryResponse() {
    *this = ::std::move(from);
  }

  inline NewPrimaryResponse& operator=(const NewPrimaryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewPrimaryResponse& operator=(NewPrimaryResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NewPrimaryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const NewPrimaryResponse* internal_default_instance() {
    return reinterpret_cast<const NewPrimaryResponse*>(
               &_NewPrimaryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(NewPrimaryResponse& a, NewPrimaryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(NewPrimaryResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewPrimaryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NewPrimaryResponse* New() const final {
    return CreateMaybeMessage<NewPrimaryResponse>(nullptr);
  }

  NewPrimaryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NewPrimaryResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NewPrimaryResponse& from);
  void MergeFrom(const NewPrimaryResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewPrimaryResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tunnelbroker.NewPrimaryResponse";
  }
  protected:
  explicit NewPrimaryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_tunnelbroker_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:tunnelbroker.NewPrimaryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tunnelbroker_2eproto;
};
// -------------------------------------------------------------------

class PongRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tunnelbroker.PongRequest) */ {
 public:
  inline PongRequest() : PongRequest(nullptr) {}
  virtual ~PongRequest();
  explicit constexpr PongRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PongRequest(const PongRequest& from);
  PongRequest(PongRequest&& from) noexcept
    : PongRequest() {
    *this = ::std::move(from);
  }

  inline PongRequest& operator=(const PongRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PongRequest& operator=(PongRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PongRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PongRequest* internal_default_instance() {
    return reinterpret_cast<const PongRequest*>(
               &_PongRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PongRequest& a, PongRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PongRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PongRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PongRequest* New() const final {
    return CreateMaybeMessage<PongRequest>(nullptr);
  }

  PongRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PongRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PongRequest& from);
  void MergeFrom(const PongRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PongRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tunnelbroker.PongRequest";
  }
  protected:
  explicit PongRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_tunnelbroker_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kDeviceTokenFieldNumber = 2,
  };
  // string userId = 1;
  void clear_userid();
  const std::string& userid() const;
  void set_userid(const std::string& value);
  void set_userid(std::string&& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  std::string* mutable_userid();
  std::string* release_userid();
  void set_allocated_userid(std::string* userid);
  private:
  const std::string& _internal_userid() const;
  void _internal_set_userid(const std::string& value);
  std::string* _internal_mutable_userid();
  public:

  // string deviceToken = 2;
  void clear_devicetoken();
  const std::string& devicetoken() const;
  void set_devicetoken(const std::string& value);
  void set_devicetoken(std::string&& value);
  void set_devicetoken(const char* value);
  void set_devicetoken(const char* value, size_t size);
  std::string* mutable_devicetoken();
  std::string* release_devicetoken();
  void set_allocated_devicetoken(std::string* devicetoken);
  private:
  const std::string& _internal_devicetoken() const;
  void _internal_set_devicetoken(const std::string& value);
  std::string* _internal_mutable_devicetoken();
  public:

  // @@protoc_insertion_point(class_scope:tunnelbroker.PongRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr devicetoken_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tunnelbroker_2eproto;
};
// -------------------------------------------------------------------

class PongResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tunnelbroker.PongResponse) */ {
 public:
  inline PongResponse() : PongResponse(nullptr) {}
  virtual ~PongResponse();
  explicit constexpr PongResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PongResponse(const PongResponse& from);
  PongResponse(PongResponse&& from) noexcept
    : PongResponse() {
    *this = ::std::move(from);
  }

  inline PongResponse& operator=(const PongResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PongResponse& operator=(PongResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PongResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PongResponse* internal_default_instance() {
    return reinterpret_cast<const PongResponse*>(
               &_PongResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PongResponse& a, PongResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PongResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PongResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PongResponse* New() const final {
    return CreateMaybeMessage<PongResponse>(nullptr);
  }

  PongResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PongResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PongResponse& from);
  void MergeFrom(const PongResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PongResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tunnelbroker.PongResponse";
  }
  protected:
  explicit PongResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_tunnelbroker_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:tunnelbroker.PongResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tunnelbroker_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CheckRequest

// string userId = 1;
inline void CheckRequest::clear_userid() {
  userid_.ClearToEmpty();
}
inline const std::string& CheckRequest::userid() const {
  // @@protoc_insertion_point(field_get:tunnelbroker.CheckRequest.userId)
  return _internal_userid();
}
inline void CheckRequest::set_userid(const std::string& value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:tunnelbroker.CheckRequest.userId)
}
inline std::string* CheckRequest::mutable_userid() {
  // @@protoc_insertion_point(field_mutable:tunnelbroker.CheckRequest.userId)
  return _internal_mutable_userid();
}
inline const std::string& CheckRequest::_internal_userid() const {
  return userid_.Get();
}
inline void CheckRequest::_internal_set_userid(const std::string& value) {
  
  userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CheckRequest::set_userid(std::string&& value) {
  
  userid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tunnelbroker.CheckRequest.userId)
}
inline void CheckRequest::set_userid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tunnelbroker.CheckRequest.userId)
}
inline void CheckRequest::set_userid(const char* value,
    size_t size) {
  
  userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tunnelbroker.CheckRequest.userId)
}
inline std::string* CheckRequest::_internal_mutable_userid() {
  
  return userid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CheckRequest::release_userid() {
  // @@protoc_insertion_point(field_release:tunnelbroker.CheckRequest.userId)
  return userid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CheckRequest::set_allocated_userid(std::string* userid) {
  if (userid != nullptr) {
    
  } else {
    
  }
  userid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tunnelbroker.CheckRequest.userId)
}

// string deviceToken = 2;
inline void CheckRequest::clear_devicetoken() {
  devicetoken_.ClearToEmpty();
}
inline const std::string& CheckRequest::devicetoken() const {
  // @@protoc_insertion_point(field_get:tunnelbroker.CheckRequest.deviceToken)
  return _internal_devicetoken();
}
inline void CheckRequest::set_devicetoken(const std::string& value) {
  _internal_set_devicetoken(value);
  // @@protoc_insertion_point(field_set:tunnelbroker.CheckRequest.deviceToken)
}
inline std::string* CheckRequest::mutable_devicetoken() {
  // @@protoc_insertion_point(field_mutable:tunnelbroker.CheckRequest.deviceToken)
  return _internal_mutable_devicetoken();
}
inline const std::string& CheckRequest::_internal_devicetoken() const {
  return devicetoken_.Get();
}
inline void CheckRequest::_internal_set_devicetoken(const std::string& value) {
  
  devicetoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CheckRequest::set_devicetoken(std::string&& value) {
  
  devicetoken_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tunnelbroker.CheckRequest.deviceToken)
}
inline void CheckRequest::set_devicetoken(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  devicetoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tunnelbroker.CheckRequest.deviceToken)
}
inline void CheckRequest::set_devicetoken(const char* value,
    size_t size) {
  
  devicetoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tunnelbroker.CheckRequest.deviceToken)
}
inline std::string* CheckRequest::_internal_mutable_devicetoken() {
  
  return devicetoken_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CheckRequest::release_devicetoken() {
  // @@protoc_insertion_point(field_release:tunnelbroker.CheckRequest.deviceToken)
  return devicetoken_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CheckRequest::set_allocated_devicetoken(std::string* devicetoken) {
  if (devicetoken != nullptr) {
    
  } else {
    
  }
  devicetoken_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), devicetoken,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tunnelbroker.CheckRequest.deviceToken)
}

// -------------------------------------------------------------------

// CheckResponse

// .tunnelbroker.CheckResponseType checkResponseType = 1;
inline void CheckResponse::clear_checkresponsetype() {
  checkresponsetype_ = 0;
}
inline ::tunnelbroker::CheckResponseType CheckResponse::_internal_checkresponsetype() const {
  return static_cast< ::tunnelbroker::CheckResponseType >(checkresponsetype_);
}
inline ::tunnelbroker::CheckResponseType CheckResponse::checkresponsetype() const {
  // @@protoc_insertion_point(field_get:tunnelbroker.CheckResponse.checkResponseType)
  return _internal_checkresponsetype();
}
inline void CheckResponse::_internal_set_checkresponsetype(::tunnelbroker::CheckResponseType value) {
  
  checkresponsetype_ = value;
}
inline void CheckResponse::set_checkresponsetype(::tunnelbroker::CheckResponseType value) {
  _internal_set_checkresponsetype(value);
  // @@protoc_insertion_point(field_set:tunnelbroker.CheckResponse.checkResponseType)
}

// -------------------------------------------------------------------

// NewPrimaryRequest

// string userId = 1;
inline void NewPrimaryRequest::clear_userid() {
  userid_.ClearToEmpty();
}
inline const std::string& NewPrimaryRequest::userid() const {
  // @@protoc_insertion_point(field_get:tunnelbroker.NewPrimaryRequest.userId)
  return _internal_userid();
}
inline void NewPrimaryRequest::set_userid(const std::string& value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:tunnelbroker.NewPrimaryRequest.userId)
}
inline std::string* NewPrimaryRequest::mutable_userid() {
  // @@protoc_insertion_point(field_mutable:tunnelbroker.NewPrimaryRequest.userId)
  return _internal_mutable_userid();
}
inline const std::string& NewPrimaryRequest::_internal_userid() const {
  return userid_.Get();
}
inline void NewPrimaryRequest::_internal_set_userid(const std::string& value) {
  
  userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NewPrimaryRequest::set_userid(std::string&& value) {
  
  userid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tunnelbroker.NewPrimaryRequest.userId)
}
inline void NewPrimaryRequest::set_userid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tunnelbroker.NewPrimaryRequest.userId)
}
inline void NewPrimaryRequest::set_userid(const char* value,
    size_t size) {
  
  userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tunnelbroker.NewPrimaryRequest.userId)
}
inline std::string* NewPrimaryRequest::_internal_mutable_userid() {
  
  return userid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NewPrimaryRequest::release_userid() {
  // @@protoc_insertion_point(field_release:tunnelbroker.NewPrimaryRequest.userId)
  return userid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NewPrimaryRequest::set_allocated_userid(std::string* userid) {
  if (userid != nullptr) {
    
  } else {
    
  }
  userid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tunnelbroker.NewPrimaryRequest.userId)
}

// string deviceToken = 2;
inline void NewPrimaryRequest::clear_devicetoken() {
  devicetoken_.ClearToEmpty();
}
inline const std::string& NewPrimaryRequest::devicetoken() const {
  // @@protoc_insertion_point(field_get:tunnelbroker.NewPrimaryRequest.deviceToken)
  return _internal_devicetoken();
}
inline void NewPrimaryRequest::set_devicetoken(const std::string& value) {
  _internal_set_devicetoken(value);
  // @@protoc_insertion_point(field_set:tunnelbroker.NewPrimaryRequest.deviceToken)
}
inline std::string* NewPrimaryRequest::mutable_devicetoken() {
  // @@protoc_insertion_point(field_mutable:tunnelbroker.NewPrimaryRequest.deviceToken)
  return _internal_mutable_devicetoken();
}
inline const std::string& NewPrimaryRequest::_internal_devicetoken() const {
  return devicetoken_.Get();
}
inline void NewPrimaryRequest::_internal_set_devicetoken(const std::string& value) {
  
  devicetoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NewPrimaryRequest::set_devicetoken(std::string&& value) {
  
  devicetoken_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tunnelbroker.NewPrimaryRequest.deviceToken)
}
inline void NewPrimaryRequest::set_devicetoken(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  devicetoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tunnelbroker.NewPrimaryRequest.deviceToken)
}
inline void NewPrimaryRequest::set_devicetoken(const char* value,
    size_t size) {
  
  devicetoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tunnelbroker.NewPrimaryRequest.deviceToken)
}
inline std::string* NewPrimaryRequest::_internal_mutable_devicetoken() {
  
  return devicetoken_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NewPrimaryRequest::release_devicetoken() {
  // @@protoc_insertion_point(field_release:tunnelbroker.NewPrimaryRequest.deviceToken)
  return devicetoken_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NewPrimaryRequest::set_allocated_devicetoken(std::string* devicetoken) {
  if (devicetoken != nullptr) {
    
  } else {
    
  }
  devicetoken_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), devicetoken,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tunnelbroker.NewPrimaryRequest.deviceToken)
}

// -------------------------------------------------------------------

// NewPrimaryResponse

// bool success = 1;
inline void NewPrimaryResponse::clear_success() {
  success_ = false;
}
inline bool NewPrimaryResponse::_internal_success() const {
  return success_;
}
inline bool NewPrimaryResponse::success() const {
  // @@protoc_insertion_point(field_get:tunnelbroker.NewPrimaryResponse.success)
  return _internal_success();
}
inline void NewPrimaryResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void NewPrimaryResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:tunnelbroker.NewPrimaryResponse.success)
}

// -------------------------------------------------------------------

// PongRequest

// string userId = 1;
inline void PongRequest::clear_userid() {
  userid_.ClearToEmpty();
}
inline const std::string& PongRequest::userid() const {
  // @@protoc_insertion_point(field_get:tunnelbroker.PongRequest.userId)
  return _internal_userid();
}
inline void PongRequest::set_userid(const std::string& value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:tunnelbroker.PongRequest.userId)
}
inline std::string* PongRequest::mutable_userid() {
  // @@protoc_insertion_point(field_mutable:tunnelbroker.PongRequest.userId)
  return _internal_mutable_userid();
}
inline const std::string& PongRequest::_internal_userid() const {
  return userid_.Get();
}
inline void PongRequest::_internal_set_userid(const std::string& value) {
  
  userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PongRequest::set_userid(std::string&& value) {
  
  userid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tunnelbroker.PongRequest.userId)
}
inline void PongRequest::set_userid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tunnelbroker.PongRequest.userId)
}
inline void PongRequest::set_userid(const char* value,
    size_t size) {
  
  userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tunnelbroker.PongRequest.userId)
}
inline std::string* PongRequest::_internal_mutable_userid() {
  
  return userid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PongRequest::release_userid() {
  // @@protoc_insertion_point(field_release:tunnelbroker.PongRequest.userId)
  return userid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PongRequest::set_allocated_userid(std::string* userid) {
  if (userid != nullptr) {
    
  } else {
    
  }
  userid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tunnelbroker.PongRequest.userId)
}

// string deviceToken = 2;
inline void PongRequest::clear_devicetoken() {
  devicetoken_.ClearToEmpty();
}
inline const std::string& PongRequest::devicetoken() const {
  // @@protoc_insertion_point(field_get:tunnelbroker.PongRequest.deviceToken)
  return _internal_devicetoken();
}
inline void PongRequest::set_devicetoken(const std::string& value) {
  _internal_set_devicetoken(value);
  // @@protoc_insertion_point(field_set:tunnelbroker.PongRequest.deviceToken)
}
inline std::string* PongRequest::mutable_devicetoken() {
  // @@protoc_insertion_point(field_mutable:tunnelbroker.PongRequest.deviceToken)
  return _internal_mutable_devicetoken();
}
inline const std::string& PongRequest::_internal_devicetoken() const {
  return devicetoken_.Get();
}
inline void PongRequest::_internal_set_devicetoken(const std::string& value) {
  
  devicetoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PongRequest::set_devicetoken(std::string&& value) {
  
  devicetoken_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tunnelbroker.PongRequest.deviceToken)
}
inline void PongRequest::set_devicetoken(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  devicetoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tunnelbroker.PongRequest.deviceToken)
}
inline void PongRequest::set_devicetoken(const char* value,
    size_t size) {
  
  devicetoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tunnelbroker.PongRequest.deviceToken)
}
inline std::string* PongRequest::_internal_mutable_devicetoken() {
  
  return devicetoken_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PongRequest::release_devicetoken() {
  // @@protoc_insertion_point(field_release:tunnelbroker.PongRequest.deviceToken)
  return devicetoken_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PongRequest::set_allocated_devicetoken(std::string* devicetoken) {
  if (devicetoken != nullptr) {
    
  } else {
    
  }
  devicetoken_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), devicetoken,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tunnelbroker.PongRequest.deviceToken)
}

// -------------------------------------------------------------------

// PongResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tunnelbroker

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::tunnelbroker::CheckResponseType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tunnelbroker::CheckResponseType>() {
  return ::tunnelbroker::CheckResponseType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tunnelbroker_2eproto
