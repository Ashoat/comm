diff --git a/node_modules/expo-media-library/android/src/main/java/expo/modules/medialibrary/GetAssets.java b/node_modules/expo-media-library/android/src/main/java/expo/modules/medialibrary/GetAssets.java
index fa7b518..6ff3f08 100644
--- a/node_modules/expo-media-library/android/src/main/java/expo/modules/medialibrary/GetAssets.java
+++ b/node_modules/expo-media-library/android/src/main/java/expo/modules/medialibrary/GetAssets.java
@@ -1,6 +1,7 @@
 package expo.modules.medialibrary;
 
 import android.content.Context;
+import android.content.ContentResolver;
 import android.database.Cursor;
 import android.os.AsyncTask;
 import android.os.Bundle;
@@ -37,7 +38,8 @@ class GetAssets extends AsyncTask<Void, Void, Void> {
     final String order = getQueryInfo.getOrder();
     final int limit = getQueryInfo.getLimit();
     final int offset = getQueryInfo.getOffset();
-    try (Cursor assets = mContext.getContentResolver().query(
+    ContentResolver contentResolver = mContext.getContentResolver();
+    try (Cursor assets = contentResolver.query(
         EXTERNAL_CONTENT,
         ASSET_PROJECTION,
         selection,
@@ -47,7 +49,7 @@ class GetAssets extends AsyncTask<Void, Void, Void> {
         mPromise.reject(ERROR_UNABLE_TO_LOAD, "Could not get assets. Query returns null.");
       } else {
         ArrayList<Bundle> assetsInfo = new ArrayList<>();
-        putAssetsInfo(assets, assetsInfo, limit, offset, false);
+        putAssetsInfo(contentResolver, assets, assetsInfo, limit, offset, false);
         response.putParcelableArrayList("assets", assetsInfo);
         response.putBoolean("hasNextPage", !assets.isAfterLast());
         response.putString("endCursor", Integer.toString(assets.getPosition()));
diff --git a/node_modules/expo-media-library/android/src/main/java/expo/modules/medialibrary/MediaLibraryConstants.java b/node_modules/expo-media-library/android/src/main/java/expo/modules/medialibrary/MediaLibraryConstants.java
index 5e3eeaf..35d459c 100644
--- a/node_modules/expo-media-library/android/src/main/java/expo/modules/medialibrary/MediaLibraryConstants.java
+++ b/node_modules/expo-media-library/android/src/main/java/expo/modules/medialibrary/MediaLibraryConstants.java
@@ -56,8 +56,8 @@ final class MediaLibraryConstants {
       put(SORT_BY_CREATION_TIME, MediaStore.Images.Media.DATE_TAKEN);
       put(SORT_BY_MODIFICATION_TIME, MediaStore.Images.Media.DATE_MODIFIED);
       put(SORT_BY_MEDIA_TYPE, MediaStore.Files.FileColumns.MEDIA_TYPE);
-      put(SORT_BY_WIDTH, MediaStore.Images.Media.WIDTH);
-      put(SORT_BY_HEIGHT, MediaStore.Images.Media.HEIGHT);
+      put(SORT_BY_WIDTH, MediaStore.MediaColumns.WIDTH);
+      put(SORT_BY_HEIGHT, MediaStore.MediaColumns.HEIGHT);
       put(SORT_BY_DURATION, MediaStore.Video.VideoColumns.DURATION);
     }
   };
@@ -70,8 +70,8 @@ final class MediaLibraryConstants {
       MediaStore.Files.FileColumns.DISPLAY_NAME,
       MediaStore.Images.Media.DATA,
       MediaStore.Files.FileColumns.MEDIA_TYPE,
-      MediaStore.Images.Media.WIDTH,
-      MediaStore.Images.Media.HEIGHT,
+      MediaStore.MediaColumns.WIDTH,
+      MediaStore.MediaColumns.HEIGHT,
       MediaStore.Images.Media.DATE_TAKEN,
       MediaStore.Images.Media.DATE_MODIFIED,
       MediaStore.Images.Media.LATITUDE,
diff --git a/node_modules/expo-media-library/android/src/main/java/expo/modules/medialibrary/MediaLibraryModule.java b/node_modules/expo-media-library/android/src/main/java/expo/modules/medialibrary/MediaLibraryModule.java
index bfe25f3..edde485 100644
--- a/node_modules/expo-media-library/android/src/main/java/expo/modules/medialibrary/MediaLibraryModule.java
+++ b/node_modules/expo-media-library/android/src/main/java/expo/modules/medialibrary/MediaLibraryModule.java
@@ -164,7 +164,7 @@ public class MediaLibraryModule extends ExportedModule {
 
   @ExpoMethod
   public void getAssetInfoAsync(String assetId, Promise promise) {
-    if (isMissingPermissions()) {
+    if (isMissingReadPermissions()) {
       promise.reject(ERROR_NO_PERMISSIONS, ERROR_NO_PERMISSIONS_MESSAGE);
       return;
     }
@@ -221,7 +221,7 @@ public class MediaLibraryModule extends ExportedModule {
 
   @ExpoMethod
   public void getAssetsAsync(Map<String, Object> assetOptions, Promise promise) {
-    if (isMissingPermissions()) {
+    if (isMissingReadPermissions()) {
       promise.reject(ERROR_NO_PERMISSIONS, ERROR_NO_PERMISSIONS_MESSAGE);
       return;
     }
@@ -285,6 +285,15 @@ public class MediaLibraryModule extends ExportedModule {
     return !permissionsManager.hasGrantedPermissions(READ_EXTERNAL_STORAGE, WRITE_EXTERNAL_STORAGE);
   }
 
+  private boolean isMissingReadPermissions() {
+    Permissions permissionsManager = mModuleRegistry.getModule(Permissions.class);
+    if (permissionsManager == null) {
+      return false;
+    }
+
+    return !permissionsManager.hasGrantedPermissions(READ_EXTERNAL_STORAGE);
+  }
+
   private boolean isMissingWritePermission() {
     Permissions permissionsManager = mModuleRegistry.getModule(Permissions.class);
     if (permissionsManager == null) {
diff --git a/node_modules/expo-media-library/android/src/main/java/expo/modules/medialibrary/MediaLibraryUtils.java b/node_modules/expo-media-library/android/src/main/java/expo/modules/medialibrary/MediaLibraryUtils.java
index da5bd28..7d70a64 100644
--- a/node_modules/expo-media-library/android/src/main/java/expo/modules/medialibrary/MediaLibraryUtils.java
+++ b/node_modules/expo-media-library/android/src/main/java/expo/modules/medialibrary/MediaLibraryUtils.java
@@ -1,14 +1,18 @@
 package expo.modules.medialibrary;
 
 import android.content.Context;
+import android.content.ContentResolver;
+import android.content.res.AssetFileDescriptor;
 import android.database.Cursor;
 import android.graphics.BitmapFactory;
 import android.os.Bundle;
+import android.media.MediaMetadataRetriever;
 import android.provider.MediaStore;
 import android.provider.MediaStore.Files;
 import android.provider.MediaStore.Images.Media;
 import androidx.exifinterface.media.ExifInterface;
 import android.text.TextUtils;
+import android.net.Uri;
 
 import java.io.File;
 import java.io.FileInputStream;
@@ -96,7 +100,8 @@ final class MediaLibraryUtils {
   }
 
   static void queryAssetInfo(Context context, final String selection, final String[] selectionArgs, boolean fullInfo, Promise promise) {
-    try (Cursor asset = context.getContentResolver().query(
+    ContentResolver contentResolver = context.getContentResolver();
+    try (Cursor asset = contentResolver.query(
         EXTERNAL_CONTENT,
         ASSET_PROJECTION,
         selection,
@@ -109,7 +114,7 @@ final class MediaLibraryUtils {
         if (asset.getCount() == 1) {
           asset.moveToFirst();
           ArrayList<Bundle> array = new ArrayList<>();
-          putAssetsInfo(asset, array, 1, 0, fullInfo);
+          putAssetsInfo(contentResolver, asset, array, 1, 0, fullInfo);
           // actually we want to return just the first item, but array.getMap returns ReadableMap
           // which is not compatible with promise.resolve and there is no simple solution to convert
           // ReadableMap to WritableMap so it's easier to return an array and pick the first item on JS side
@@ -126,7 +131,7 @@ final class MediaLibraryUtils {
     }
   }
 
-  static void putAssetsInfo(Cursor cursor, ArrayList<Bundle> response, int limit, int offset, boolean fullInfo) throws IOException {
+  static void putAssetsInfo(ContentResolver contentResolver, Cursor cursor, ArrayList<Bundle> response, int limit, int offset, boolean fullInfo) throws IOException {
     final int idIndex = cursor.getColumnIndex(Media._ID);
     final int filenameIndex = cursor.getColumnIndex(Media.DISPLAY_NAME);
     final int mediaTypeIndex = cursor.getColumnIndex(Files.FileColumns.MEDIA_TYPE);
@@ -142,9 +147,16 @@ final class MediaLibraryUtils {
       return;
     }
     for (int i = 0; i < limit && !cursor.isAfterLast(); i++) {
-      String localUri = "file://" + cursor.getString(localUriIndex);
+      String path = cursor.getString(localUriIndex);
+      String localUri = "file://" + path;
       int mediaType = cursor.getInt(mediaTypeIndex);
-      int[] size = getSizeFromCursor(cursor, mediaType, localUriIndex);
+
+      ExifInterface exifInterface = null;
+      if (mediaType == Files.FileColumns.MEDIA_TYPE_IMAGE) {
+        exifInterface = new ExifInterface(path);
+      }
+
+      int[] size = getSizeFromCursor(contentResolver, exifInterface, cursor, mediaType, localUriIndex);
 
       Bundle asset = new Bundle();
       asset.putString("id", cursor.getString(idIndex));
@@ -159,8 +171,8 @@ final class MediaLibraryUtils {
       asset.putString("albumId", cursor.getString(albumIdIndex));
 
       if (fullInfo) {
-        if (mediaType == Files.FileColumns.MEDIA_TYPE_IMAGE) {
-          getExifFullInfo(cursor, asset);
+        if (exifInterface != null) {
+          getExifFullInfo(exifInterface, asset);
         }
 
         asset.putString("localUri", localUri);
@@ -213,25 +225,66 @@ final class MediaLibraryUtils {
     return MEDIA_TYPES.get(mediaType);
   }
 
-  static int[] getSizeFromCursor(Cursor cursor, int mediaType, int localUriIndex){
+  static int[] getSizeFromCursor(ContentResolver contentResolver, ExifInterface exifInterface, Cursor cursor, int mediaType, int localUriIndex) {
+    final String uri = cursor.getString(localUriIndex);
+
+    if (mediaType == Files.FileColumns.MEDIA_TYPE_VIDEO) {
+      Uri photoUri = Uri.parse("file://" + uri);
+      try {
+        AssetFileDescriptor photoDescriptor = contentResolver.openAssetFileDescriptor(photoUri, "r");
+        MediaMetadataRetriever retriever = new MediaMetadataRetriever();
+        try {
+          retriever.setDataSource(photoDescriptor.getFileDescriptor());
+          int videoWidth = Integer.parseInt(
+            retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_VIDEO_WIDTH)
+          );
+          int videoHeight = Integer.parseInt(
+            retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_VIDEO_HEIGHT)
+          );
+          int videoOrientation = Integer.parseInt(
+            retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_VIDEO_ROTATION)
+          );
+          return maybeRotateAssetSize(videoWidth, videoHeight, videoOrientation);
+        } catch (NumberFormatException e) {
+        } finally {
+          retriever.release();
+          photoDescriptor.close();
+        }
+      } catch (Exception e) {
+      }
+    }
+
+    final int widthIndex = cursor.getColumnIndex(MediaStore.MediaColumns.WIDTH);
+    final int heightIndex = cursor.getColumnIndex(MediaStore.MediaColumns.HEIGHT);
     final int orientationIndex = cursor.getColumnIndex(Media.ORIENTATION);
-    final int widthIndex = cursor.getColumnIndex(Media.WIDTH);
-    final int heightIndex = cursor.getColumnIndex(Media.HEIGHT);
-
-    int[] size;
-    // If image doesn't have the required information, we can get them from Bitmap.Options
-    if ((cursor.getType(widthIndex) == Cursor.FIELD_TYPE_NULL ||
-        cursor.getType(heightIndex) == Cursor.FIELD_TYPE_NULL) &&
-        mediaType == Files.FileColumns.MEDIA_TYPE_IMAGE) {
+    int width = cursor.getInt(widthIndex);
+    int height = cursor.getInt(heightIndex);
+    int orientation = cursor.getInt(orientationIndex);
+
+    if (width <= 0 || height <= 0) {
       BitmapFactory.Options options = new BitmapFactory.Options();
       options.inJustDecodeBounds = true;
+      BitmapFactory.decodeFile(uri, options);
+      width = options.outWidth;
+      height = options.outHeight;
+    }
 
-      BitmapFactory.decodeFile(cursor.getString(localUriIndex), options);
-      size = maybeRotateAssetSize(options.outWidth, options.outHeight, cursor.getInt(orientationIndex));
-    } else {
-      size = maybeRotateAssetSize(cursor.getInt(widthIndex), cursor.getInt(heightIndex), cursor.getInt(orientationIndex));
+    if (exifInterface != null) {
+      int exifOrientation = exifInterface.getAttributeInt(
+        ExifInterface.TAG_ORIENTATION,
+        ExifInterface.ORIENTATION_NORMAL
+      );
+      if (
+        exifOrientation == ExifInterface.ORIENTATION_ROTATE_90 ||
+        exifOrientation == ExifInterface.ORIENTATION_ROTATE_270 ||
+        exifOrientation == ExifInterface.ORIENTATION_TRANSPOSE ||
+        exifOrientation == ExifInterface.ORIENTATION_TRANSVERSE
+      ) {
+        orientation = 90;
+      }
     }
-    return size;
+
+    return maybeRotateAssetSize(width, height, orientation);
   }
 
   static int[] maybeRotateAssetSize(int width, int height, int orientation) {
@@ -265,9 +318,7 @@ final class MediaLibraryUtils {
     return TextUtils.join(",", result);
   }
 
-  static void getExifFullInfo(Cursor cursor, Bundle response) throws IOException {
-    File input = new File(cursor.getString(cursor.getColumnIndex(Media.DATA)));
-    ExifInterface exifInterface = new ExifInterface(input.getPath());
+  static void getExifFullInfo(ExifInterface exifInterface, Bundle response) {
     Bundle exifMap = new Bundle();
     for (String[] tagInfo : exifTags) {
       String name = tagInfo[1];
diff --git a/node_modules/expo-media-library/ios/EXMediaLibrary.podspec b/node_modules/expo-media-library/ios/EXMediaLibrary.podspec
index 7cc9e70..a5b5336 100644
--- a/node_modules/expo-media-library/ios/EXMediaLibrary.podspec
+++ b/node_modules/expo-media-library/ios/EXMediaLibrary.podspec
@@ -18,4 +18,5 @@ Pod::Spec.new do |s|
 
   s.dependency 'UMCore'
   s.dependency 'UMPermissionsInterface'
+  s.dependency 'UMFileSystemInterface'
 end
