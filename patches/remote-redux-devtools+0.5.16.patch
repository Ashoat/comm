diff --git a/node_modules/remote-redux-devtools/src/devTools.js b/node_modules/remote-redux-devtools/src/devTools.js
index 09001b2..1c8e5cc 100644
--- a/node_modules/remote-redux-devtools/src/devTools.js
+++ b/node_modules/remote-redux-devtools/src/devTools.js
@@ -1,8 +1,7 @@
-import { stringify, parse } from 'jsan';
+import { stringify } from 'jsan';
 import socketCluster from 'socketcluster-client';
 import configureStore from './configureStore';
 import { defaultSocketOptions } from './constants';
-import getHostForRN from 'rn-host-detect';
 import { evalAction, getActionsArray } from 'redux-devtools-core/lib/utils';
 import catchErrors from 'redux-devtools-core/lib/utils/catchErrors';
 import {
@@ -11,6 +10,7 @@ import {
   filterStagedActions,
   filterState
 } from 'redux-devtools-core/lib/utils/filters';
+import importState from 'redux-devtools-core/lib/utils/importState';
 
 function async(fn) {
   setTimeout(fn, 0);
@@ -25,12 +25,18 @@ function getRandomId() {
 }
 
 class DevToolsEnhancer {
-  constructor() {
+  errorCounts = {};
+
+  // an async function that returns a proper remote server hostname and uses
+  // `isEmulator` from 'react-native-device-info' is expected
+  constructor(hostnamePromise) {
     this.enhance.updateStore = newStore => {
       console.warn('devTools.updateStore is deprecated use composeWithDevTools instead: ' +
         'https://github.com/zalmoxisus/remote-redux-devtools#use-devtools-compose-helper');
       this.store = newStore;
     };
+
+    this.hostnamePromise = hostnamePromise;
   }
 
   getLiftedStateRaw() {
@@ -95,13 +101,33 @@ class DevToolsEnhancer {
     }
   }
 
+  importPayloadFrom = (state) => {
+    const instance = {
+      name: this.instanceName,
+      id: this.appInstanceId,
+      store: this.store,
+    };
+    try {
+      const nextLiftedState = importState(state, instance);
+      if (!nextLiftedState) {
+        return;
+      }
+      this.store.liftedStore.dispatch({ type: 'IMPORT_STATE', ...nextLiftedState });
+      this.relay(
+        'STATE',
+        this.getLiftedState(),
+        instance
+      );
+    } catch (e) {
+      this.relay('ERROR', e.message, instance);
+    }
+  };
+
   handleMessages = (message) => {
     if (
       message.type === 'IMPORT' || message.type === 'SYNC' && this.socket.id && message.id !== this.socket.id
     ) {
-      this.store.liftedStore.dispatch({
-        type: 'IMPORT_STATE', nextLiftedState: parse(message.state)
-      });
+      this.importPayloadFrom(message.state);
     } else if (message.type === 'UPDATE') {
       this.relay('STATE', this.getLiftedState());
     } else if (message.type === 'START') {
@@ -140,7 +166,7 @@ class DevToolsEnhancer {
     if (options.port) {
       this.socketOptions = {
         port: options.port,
-        hostname: options.hostname || 'localhost',
+        hostname: options.hostname,
         secure: options.secure
       };
     } else this.socketOptions = defaultSocketOptions;
@@ -187,12 +213,35 @@ class DevToolsEnhancer {
     }
   };
 
+  startWrapper = async () => {
+    if (this.started || (this.socket && this.socket.getState() === this.socket.CONNECTING)) {
+      return;
+    }
+
+    if (!this.socketOptions.port) {
+      // no port provided - we should throw!
+      throw new Error('no port provided');
+    }
+    if (this.socketOptions.hostname) {
+      // hostname provided - don't look for it
+      this.start();
+      return;
+    }
+    // obtain the hostname
+    try {
+      this.socketOptions.hostname = await this.hostnamePromise;
+      this.start();
+    } catch (err) {
+      throw new Error('Error obtaining socket hostname: ' + err.toString());
+    }
+  };
+
   start = () => {
     if (this.started || this.socket && this.socket.getState() === this.socket.CONNECTING) return;
 
     this.socket = socketCluster.connect(this.socketOptions);
 
-    this.socket.on('error', function (err) {
+    this.socket.on('error', (err) => {
       // if we've already had this error before, increment it's counter, otherwise assign it '1' since we've had the error once.
       this.errorCounts[err.name] = this.errorCounts.hasOwnProperty(err.name) ? this.errorCounts[err.name] + 1 : 1;
 
@@ -229,7 +278,7 @@ class DevToolsEnhancer {
     this.lastAction = action.type;
     if (!this.started && this.sendOnError === 2 && this.store.liftedStore) async(this.checkForReducerErrors);
     else if (action.action) {
-      if (this.startOn && !this.started && this.startOn.indexOf(action.action.type) !== -1) async(this.start);
+      if (this.startOn && !this.started && this.startOn.indexOf(action.action.type) !== -1) async(this.startWrapper);
       else if (this.stopOn && this.started && this.stopOn.indexOf(action.action.type) !== -1) async(this.stop);
       else if (this.sendOn && !this.started && this.sendOn.indexOf(action.action.type) !== -1) async(this.send);
     }
@@ -261,10 +310,7 @@ class DevToolsEnhancer {
   }
 
   enhance = (options = {}) => {
-    this.init({
-      ...options,
-      hostname: getHostForRN(options.hostname || 'localhost')
-    });
+    this.init(options);
     const realtime = typeof options.realtime === 'undefined'
       ? process.env.NODE_ENV === 'development' : options.realtime;
     if (!realtime && !(this.startOn || this.sendOn || this.sendOnError)) return f => f;
@@ -285,7 +331,8 @@ class DevToolsEnhancer {
           }
         )(reducer, initialState);
 
-        if (realtime) this.start();
+        if (realtime) this.startWrapper();
+
         this.store.subscribe(() => {
           if (this.isMonitored) this.handleChange(this.store.getState(), this.getLiftedStateRaw(), maxAge);
         });
@@ -295,10 +342,10 @@ class DevToolsEnhancer {
   }
 }
 
-export default (...args) => new DevToolsEnhancer().enhance(...args);
+export default (hostnamePromise, ...args) => new DevToolsEnhancer(hostnamePromise).enhance(...args);
 
-const compose = (options) => (...funcs) => (...args) => {
-  const devToolsEnhancer = new DevToolsEnhancer();
+const compose = (hostnamePromise, options) => (...funcs) => (...args) => {
+  const devToolsEnhancer = new DevToolsEnhancer(hostnamePromise);
 
   function preEnhancer(createStore) {
     return (reducer, preloadedState, enhancer) => {
@@ -317,12 +364,12 @@ const compose = (options) => (...funcs) => (...args) => {
   );
 };
 
-export function composeWithDevTools(...funcs) {
+export function composeWithDevTools(hostnamePromise, ...funcs) {
   if (funcs.length === 0) {
-    return new DevToolsEnhancer().enhance();
+    return new DevToolsEnhancer(hostnamePromise).enhance();
   }
   if (funcs.length === 1 && typeof funcs[0] === 'object') {
-    return compose(funcs[0]);
+    return compose(hostnamePromise, funcs[0]);
   }
-  return compose({})(...funcs);
+  return compose(hostnamePromise, {})(...funcs);
 }
