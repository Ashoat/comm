diff --git a/node_modules/@react-native-community/clipboard/RNCClipboard.podspec b/node_modules/@react-native-community/clipboard/RNCClipboard.podspec
index 095b496..b19b07f 100644
--- a/node_modules/@react-native-community/clipboard/RNCClipboard.podspec
+++ b/node_modules/@react-native-community/clipboard/RNCClipboard.podspec
@@ -17,4 +17,6 @@ Pod::Spec.new do |s|
   s.osx.source_files = "macos/**/*.{h,m,mm}"
 
   s.dependency 'React-Core'
+  s.dependency 'SDWebImage', '~> 5.8'
+
 end
diff --git a/node_modules/@react-native-community/clipboard/dist/Clipboard.d.ts b/node_modules/@react-native-community/clipboard/dist/Clipboard.d.ts
index af27802..bb0cc9c 100644
--- a/node_modules/@react-native-community/clipboard/dist/Clipboard.d.ts
+++ b/node_modules/@react-native-community/clipboard/dist/Clipboard.d.ts
@@ -21,6 +21,64 @@ export declare const Clipboard: {
      * @param the content to be stored in the clipboard.
      */
     setString(content: string): void;
+    /**
+     * (IOS Only)
+     * Set clipboard image from Base64 image representation.
+     * You can use following code to set clipboard content
+     * ```javascript
+     * _setContent() {
+     *   Clipboard.setImageFromBase64('data:image/png;base64,....');
+     * }
+     * ```
+     * @param the image to be stored in the clipboard.
+     */
+    setImageFromBase64(image: string): void;
+    /**
+     * (IOS Only)
+     * Get PNG image from clipboard in Base64.
+     * This method returns a `Promise`, so you can use following code to get clipboard content:
+     * ```javascript
+     * async _getContent() {
+     *   var content = await Clipboard.getPNGImageData();
+     * }
+     * ```
+     */
+    getPNGImageData(): Promise<string>;
+    /**
+     * (IOS Only)
+     * Get JPG image from clipboard in Base64.
+     * This method returns a `Promise`, so you can use following code to get clipboard content:
+     * ```javascript
+     * async _getContent() {
+     *   var content = await Clipboard.getJPGImageData();
+     * }
+     * ```
+     */
+    getJPGImageData(): Promise<string>;
+    /**
+     * (IOS Only)
+     * Get clipboard image data of unknown type.
+     * The image format can't be determined by MIME-type, but can be found via magic numbers.
+     * This method returns a `Promise`, so you can use following code to get clipboard content:
+     * ```javascript
+     * async _getContent() {
+     *   var content = await Clipboard.getImageData();
+     * }
+     * ```
+     */
+    getImageData(): Promise<string>;
+    /**
+     * (IOS Only)
+     * Get filepath (in tmp directory) of clipboard image.
+     * The image format can't be determined by MIME-type or extension, but can via magic numbers.
+     * This method returns a `Promise`, so you can use following code to get clipboard content:
+     * ```javascript
+     * async _getContent() {
+     *   var content = await Clipboard.getImageFilePath();
+     * }
+     * ```
+     */
+    getImageFilePath(): Promise<string>;
     /**
      * Returns whether the clipboard has content or is empty.
      * This method returns a `Promise`, so you can use following code to get clipboard content
diff --git a/node_modules/@react-native-community/clipboard/dist/Clipboard.js b/node_modules/@react-native-community/clipboard/dist/Clipboard.js
index c0c652d..38077b6 100644
--- a/node_modules/@react-native-community/clipboard/dist/Clipboard.js
+++ b/node_modules/@react-native-community/clipboard/dist/Clipboard.js
@@ -32,6 +32,74 @@ exports.Clipboard = {
     setString: function (content) {
         NativeClipboard_1.default.setString(content);
     },
+    /**
+     * (IOS Only)
+     * Set clipboard image from Base64 image representation.
+     * You can use following code to set clipboard content
+     * ```javascript
+     * _setContent() {
+     *   Clipboard.setImageFromBase64('data:image/png;base64,....');
+     * }
+     * ```
+     * @param the image to be stored in the clipboard.
+     */
+    setImageFromBase64: function (image) {
+        NativeClipboard_1.default.setImageFromBase64(image);
+    },
+    /**
+     * (IOS Only)
+     * Get PNG image from clipboard in Base64.
+     * This method returns a `Promise`, so you can use following code to get clipboard content:
+     * ```javascript
+     * async _getContent() {
+     *   var content = await Clipboard.getPNGImageData();
+     * }
+     * ```
+     */
+    getPNGImageData: function () {
+        return NativeClipboard_1.default.getPNGImageData();
+    },
+    /**
+     * (IOS Only)
+     * Get JPG image from clipboard in Base64.
+     * This method returns a `Promise`, so you can use following code to get clipboard content:
+     * ```javascript
+     * async _getContent() {
+     *   var content = await Clipboard.getJPGImageData();
+     * }
+     * ```
+     */
+    getJPGImageData: function () {
+        return NativeClipboard_1.default.getJPGImageData();
+    },
+    /**
+     * (IOS Only)
+     * Get clipboard image data of unknown type.
+     * The image format can't be determined by MIME-type, but can be found via magic numbers.
+     * This method returns a `Promise`, so you can use following code to get clipboard content:
+     * ```javascript
+     * async _getContent() {
+     *   var content = await Clipboard.getImageData();
+     * }
+     * ```
+     */
+    getImageData: function () {
+        return NativeClipboard_1.default.getImageData();
+    },
+    /**
+     * (IOS Only)
+     * Get filepath (in tmp directory) of clipboard image.
+     * The image format can't be determined by MIME-type or extension, but can via magic numbers.
+     * This method returns a `Promise`, so you can use following code to get clipboard content:
+     * ```javascript
+     * async _getContent() {
+     *   var content = await Clipboard.getImageFilePath();
+     * }
+     * ```
+     */
+    getImageFilePath: function () {
+        return NativeClipboard_1.default.getImageFilePath();
+    },
     /**
      * Returns whether the clipboard has content or is empty.
      * This method returns a `Promise`, so you can use following code to get clipboard content
diff --git a/node_modules/@react-native-community/clipboard/ios/RNCClipboard.m b/node_modules/@react-native-community/clipboard/ios/RNCClipboard.m
index 3b848c2..9b7cee9 100644
--- a/node_modules/@react-native-community/clipboard/ios/RNCClipboard.m
+++ b/node_modules/@react-native-community/clipboard/ios/RNCClipboard.m
@@ -1,6 +1,7 @@
 #import "RNCClipboard.h"
 
 
+#import <MobileCoreServices/MobileCoreServices.h>
 #import <UIKit/UIKit.h>
 #import <React/RCTBridge.h>
 #import <React/RCTEventDispatcher.h>
@@ -28,6 +29,83 @@ - (dispatch_queue_t)methodQueue
   resolve((clipboard.string ? : @""));
 }
 
+RCT_EXPORT_METHOD(setImageFromBase64:(NSString *)image)
+{
+  NSString *strippedBase64 = [image copy];
+  NSString *pngPrefix = @"data:image/png;base64,";
+  NSString *jpgPrefix = @"data:image/jpeg;base64";
+  
+  if ([image hasPrefix: pngPrefix]) {
+    NSInteger offset = [pngPrefix length];
+    strippedBase64 = [image substringFromIndex: offset];
+  } else if ([image hasPrefix: jpgPrefix]) {
+    NSInteger offset = [jpgPrefix length];
+    strippedBase64 = [image substringFromIndex: offset];
+  }
+  
+  NSData *imageData = [[NSData alloc]initWithBase64EncodedString: strippedBase64 options: NSDataBase64DecodingIgnoreUnknownCharacters];
+  UIImage *uiImage = [UIImage imageWithData: imageData];
+  UIPasteboard *clipboard = [UIPasteboard generalPasteboard];
+  clipboard.image = (uiImage ?: NULL);
+}
+
+RCT_EXPORT_METHOD(getPNGImageData : (RCTPromiseResolveBlock)resolve reject : (__unused RCTPromiseRejectBlock)reject)
+{
+  NSString *pngPrefix = @"data:image/png;base64,";
+  UIPasteboard *clipboard = [UIPasteboard generalPasteboard];
+  UIImage *pastedImage = clipboard.image;
+  
+  if (!pastedImage) {
+    resolve(NULL);
+    return;
+  }
+  
+  NSString *imageDataBase64 = [UIImagePNGRepresentation(pastedImage) base64EncodedStringWithOptions:NSDataBase64Encoding64CharacterLineLength];
+  NSString* withPrefix = [pngPrefix stringByAppendingString:imageDataBase64];
+  resolve((withPrefix ?: NULL));
+}
+
+RCT_EXPORT_METHOD(getJPGImageData : (RCTPromiseResolveBlock)resolve reject : (__unused RCTPromiseRejectBlock)reject)
+{
+  NSString *jpgPrefix = @"data:image/jpeg;base64,";
+  UIPasteboard *clipboard = [UIPasteboard generalPasteboard];
+  UIImage *pastedImage = clipboard.image;
+  
+  if (!pastedImage) {
+    resolve(NULL);
+    return;
+  }
+  
+  NSString *imageDataBase64 = [UIImageJPEGRepresentation(pastedImage, 1.0) base64EncodedStringWithOptions:NSDataBase64Encoding64CharacterLineLength];
+  NSString* withPrefix = [jpgPrefix stringByAppendingString:imageDataBase64];
+  resolve((withPrefix ?: NULL));
+}
+
+RCT_EXPORT_METHOD(getImageData: (RCTPromiseResolveBlock)resolve reject : (__unused RCTPromiseRejectBlock)reject)
+{
+  NSData *pastedImageData = [[UIPasteboard generalPasteboard] dataForPasteboardType:(NSString*)kUTTypeImage];
+  NSString *base64 = [pastedImageData base64EncodedStringWithOptions:NSDataBase64Encoding64CharacterLineLength];
+  resolve((base64 ?: NULL));
+}
+
+RCT_EXPORT_METHOD(getImageFilePath : (RCTPromiseResolveBlock)resolve reject : (__unused RCTPromiseRejectBlock)reject)
+{
+  NSFileManager *fileManager = [NSFileManager defaultManager];
+  NSData *pastedImageData = [[UIPasteboard generalPasteboard] dataForPasteboardType:(NSString*)kUTTypeImage];
+  
+  if (!pastedImageData) {
+    resolve(NULL);
+    return;
+  }
+
+  NSString *fileName = [@([pastedImageData hash]) stringValue];
+  NSString *dest = [NSTemporaryDirectory() stringByAppendingPathComponent:fileName];
+  if ([fileManager fileExistsAtPath:dest]){
+    [pastedImageData writeToFile:dest atomically:true];
+  }
+  resolve((dest ?: NULL));
+}
+
 RCT_EXPORT_METHOD(hasString:(RCTPromiseResolveBlock)resolve
                   reject:(__unused RCTPromiseRejectBlock)reject)
 {
